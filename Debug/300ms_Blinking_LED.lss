
300ms_Blinking_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000894  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000894  00000928  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800068  00800068  00000930  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000960  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c1d  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075b  00000000  00000000  000016a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ea  00000000  00000000  00001e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  000027f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000500  00000000  00000000  00002b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000091d  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000393d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 8d 01 	jmp	0x31a	; 0x31a <__vector_4>
  14:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_5>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_7>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_9>
  28:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__vector_10>
  2c:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_11>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	87 03       	fmuls	r16, r23
  56:	91 03       	fmuls	r17, r17
  58:	9b 03       	fmulsu	r17, r19
  5a:	a5 03       	fmuls	r18, r21
  5c:	b9 03       	fmulsu	r19, r17
  5e:	af 03       	fmulsu	r18, r23
  60:	c3 03       	fmuls	r20, r19
  62:	cd 03       	fmulsu	r20, r21
  64:	f2 03       	fmuls	r23, r18
  66:	fc 03       	fmulsu	r23, r20
  68:	06 04       	cpc	r0, r6
  6a:	10 04       	cpc	r1, r0
  6c:	24 04       	cpc	r2, r4
  6e:	1a 04       	cpc	r1, r10
  70:	2e 04       	cpc	r2, r14
  72:	38 04       	cpc	r3, r8

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e4 e9       	ldi	r30, 0x94	; 148
  88:	f8 e0       	ldi	r31, 0x08	; 8
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a8 36       	cpi	r26, 0x68	; 104
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	a8 e6       	ldi	r26, 0x68	; 104
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	af 36       	cpi	r26, 0x6F	; 111
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  aa:	0c 94 48 04 	jmp	0x890	; 0x890 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <LED_init>:
 *      Author: Omar
 */
#include "LED.h"
#include "..\MC\My_avr.h"
void LED_init()
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	27 97       	sbiw	r28, 0x07	; 7
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	cd bf       	out	0x3d, r28	; 61
	DIO_init(PA, 0X01);
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_init>
	config conf = {timer1, compare, f_cpu_clk_1024, 293};
  ce:	87 e0       	ldi	r24, 0x07	; 7
  d0:	e0 e6       	ldi	r30, 0x60	; 96
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	de 01       	movw	r26, r28
  d6:	11 96       	adiw	r26, 0x01	; 1
  d8:	01 90       	ld	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	8a 95       	dec	r24
  de:	e1 f7       	brne	.-8      	; 0xd8 <LED_init+0x26>
	Timer_init(&conf);
  e0:	ce 01       	movw	r24, r28
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Timer_init>
	Timer_setCallBack(timer1, LED_toggle);
  e8:	6f e8       	ldi	r22, 0x8F	; 143
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	0e 94 db 01 	call	0x3b6	; 0x3b6 <Timer_setCallBack>
	SETBIT(SREG,7); //ENABLE GLOBAL INTERRUPT
  f2:	8f b7       	in	r24, 0x3f	; 63
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	8f bf       	out	0x3f, r24	; 63
}
  f8:	27 96       	adiw	r28, 0x07	; 7
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	cd bf       	out	0x3d, r28	; 61
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <LED_on>:
void LED_on()
{
	DIO_set(PA,0X01);
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_set>
 112:	08 95       	ret

00000114 <LED_off>:
}
void LED_off()
{
	DIO_reset(PA,0X01);
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_reset>
 11c:	08 95       	ret

0000011e <LED_toggle>:
}
void LED_toggle()
{
	volatile static uint8_t state = OFF;
	if(state == ON)
 11e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	29 f4       	brne	.+10     	; 0x130 <LED_toggle+0x12>
	{
		LED_off();
 126:	0e 94 8a 00 	call	0x114	; 0x114 <LED_off>
		state = OFF;
 12a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 12e:	08 95       	ret
	}
	else if(state == OFF)
 130:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 134:	81 11       	cpse	r24, r1
 136:	05 c0       	rjmp	.+10     	; 0x142 <LED_toggle+0x24>
	{
		LED_on();
 138:	0e 94 85 00 	call	0x10a	; 0x10a <LED_on>
		state = ON;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
 142:	08 95       	ret

00000144 <main>:
 */ 
#include "ECUAL/LED.h"
int main(void)
{
			
    LED_init();
 144:	0e 94 59 00 	call	0xb2	; 0xb2 <LED_init>
 148:	ff cf       	rjmp	.-2      	; 0x148 <main+0x4>

0000014a <DIO_init>:
 *      Author: Omar
 */
#include "dio.h"
void DIO_init(uint8_t Port_name, uint8_t value )
{
	switch(Port_name)
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	51 f0       	breq	.+20     	; 0x162 <DIO_init+0x18>
 14e:	28 f0       	brcs	.+10     	; 0x15a <DIO_init+0x10>
 150:	82 30       	cpi	r24, 0x02	; 2
 152:	59 f0       	breq	.+22     	; 0x16a <DIO_init+0x20>
 154:	83 30       	cpi	r24, 0x03	; 3
 156:	69 f0       	breq	.+26     	; 0x172 <DIO_init+0x28>
 158:	08 95       	ret
	{
		case PA:
		{
			DDRA |= value;
 15a:	8a b3       	in	r24, 0x1a	; 26
 15c:	68 2b       	or	r22, r24
 15e:	6a bb       	out	0x1a, r22	; 26
		}
		break;
 160:	08 95       	ret
		case PB:
		{
			DDRB |= value;
 162:	87 b3       	in	r24, 0x17	; 23
 164:	68 2b       	or	r22, r24
 166:	67 bb       	out	0x17, r22	; 23
		}
		break;
 168:	08 95       	ret
		case PC:
		{
			DDRC |= value;
 16a:	84 b3       	in	r24, 0x14	; 20
 16c:	68 2b       	or	r22, r24
 16e:	64 bb       	out	0x14, r22	; 20
		}
		break;
 170:	08 95       	ret
		case PD:
		{
			DDRD |= value;
 172:	81 b3       	in	r24, 0x11	; 17
 174:	68 2b       	or	r22, r24
 176:	61 bb       	out	0x11, r22	; 17
 178:	08 95       	ret

0000017a <DIO_set>:
		break;
	}
}
void DIO_set(uint8_t Port_name, uint8_t value)
{
	switch(Port_name)
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	51 f0       	breq	.+20     	; 0x192 <DIO_set+0x18>
 17e:	28 f0       	brcs	.+10     	; 0x18a <DIO_set+0x10>
 180:	82 30       	cpi	r24, 0x02	; 2
 182:	59 f0       	breq	.+22     	; 0x19a <DIO_set+0x20>
 184:	83 30       	cpi	r24, 0x03	; 3
 186:	69 f0       	breq	.+26     	; 0x1a2 <DIO_set+0x28>
 188:	08 95       	ret
	{
		case PA:
		{
			PORTA |= value;
 18a:	8b b3       	in	r24, 0x1b	; 27
 18c:	68 2b       	or	r22, r24
 18e:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 190:	08 95       	ret
		case PB:
		{
			PORTA |= value;
 192:	8b b3       	in	r24, 0x1b	; 27
 194:	68 2b       	or	r22, r24
 196:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 198:	08 95       	ret
		case PC:
		{
			PORTA |= value;
 19a:	8b b3       	in	r24, 0x1b	; 27
 19c:	68 2b       	or	r22, r24
 19e:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 1a0:	08 95       	ret
		case PD:
		{
			PORTA |= value;
 1a2:	8b b3       	in	r24, 0x1b	; 27
 1a4:	68 2b       	or	r22, r24
 1a6:	6b bb       	out	0x1b, r22	; 27
 1a8:	08 95       	ret

000001aa <DIO_reset>:
		break;
	}
}
void DIO_reset(uint8_t Port_name, uint8_t value)
{
	switch(Port_name)
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	59 f0       	breq	.+22     	; 0x1c4 <DIO_reset+0x1a>
 1ae:	28 f0       	brcs	.+10     	; 0x1ba <DIO_reset+0x10>
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	69 f0       	breq	.+26     	; 0x1ce <DIO_reset+0x24>
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	81 f0       	breq	.+32     	; 0x1d8 <DIO_reset+0x2e>
 1b8:	08 95       	ret
	{
		case PA:
		{
			PORTA = PORTA & (~value);
 1ba:	8b b3       	in	r24, 0x1b	; 27
 1bc:	60 95       	com	r22
 1be:	68 23       	and	r22, r24
 1c0:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 1c2:	08 95       	ret
		case PB:
		{
			PORTB = PORTB & (~value);
 1c4:	88 b3       	in	r24, 0x18	; 24
 1c6:	60 95       	com	r22
 1c8:	68 23       	and	r22, r24
 1ca:	68 bb       	out	0x18, r22	; 24
		}
		break;
 1cc:	08 95       	ret
		case PC:
		{
			PORTC = PORTC & (~value);
 1ce:	85 b3       	in	r24, 0x15	; 21
 1d0:	60 95       	com	r22
 1d2:	68 23       	and	r22, r24
 1d4:	65 bb       	out	0x15, r22	; 21
		}
		break;
 1d6:	08 95       	ret
		case PD:
		{
			PORTD = PORTD & (~value);
 1d8:	82 b3       	in	r24, 0x12	; 18
 1da:	60 95       	com	r22
 1dc:	68 23       	and	r22, r24
 1de:	62 bb       	out	0x12, r22	; 18
 1e0:	08 95       	ret

000001e2 <__vector_7>:
static  void(*Timer2_Call_Back_Ptr)(void)=NULL_PTR;
/**************************************************************************************************************
 *                                                 ISRs Timer0
 * *************************************************************************************************************/
void __vector_7(void)//ISR of COMPARE timer1
{
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19
 1f0:	4f 93       	push	r20
 1f2:	5f 93       	push	r21
 1f4:	6f 93       	push	r22
 1f6:	7f 93       	push	r23
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	af 93       	push	r26
 1fe:	bf 93       	push	r27
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31
       (*Timer1_Call_Back_Ptr)();
 204:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <Timer1_Call_Back_Ptr>
 208:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <Timer1_Call_Back_Ptr+0x1>
 20c:	09 95       	icall
}
 20e:	ff 91       	pop	r31
 210:	ef 91       	pop	r30
 212:	bf 91       	pop	r27
 214:	af 91       	pop	r26
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	7f 91       	pop	r23
 21c:	6f 91       	pop	r22
 21e:	5f 91       	pop	r21
 220:	4f 91       	pop	r20
 222:	3f 91       	pop	r19
 224:	2f 91       	pop	r18
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <__vector_9>:
void __vector_9(void)//ISR of OVERFLOW timer1
{
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	4f 93       	push	r20
 240:	5f 93       	push	r21
 242:	6f 93       	push	r22
 244:	7f 93       	push	r23
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31
	(*Timer1_Call_Back_Ptr)();
 252:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <Timer1_Call_Back_Ptr>
 256:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <Timer1_Call_Back_Ptr+0x1>
 25a:	09 95       	icall
}
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <__vector_10>:
void __vector_10(void)//ISR of COMPARE timer0
{
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	2f 93       	push	r18
 28a:	3f 93       	push	r19
 28c:	4f 93       	push	r20
 28e:	5f 93       	push	r21
 290:	6f 93       	push	r22
 292:	7f 93       	push	r23
 294:	8f 93       	push	r24
 296:	9f 93       	push	r25
 298:	af 93       	push	r26
 29a:	bf 93       	push	r27
 29c:	ef 93       	push	r30
 29e:	ff 93       	push	r31
	(*Timer0_Call_Back_Ptr)();
 2a0:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <Timer0_Call_Back_Ptr>
 2a4:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <Timer0_Call_Back_Ptr+0x1>
 2a8:	09 95       	icall
}
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	bf 91       	pop	r27
 2b0:	af 91       	pop	r26
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	7f 91       	pop	r23
 2b8:	6f 91       	pop	r22
 2ba:	5f 91       	pop	r21
 2bc:	4f 91       	pop	r20
 2be:	3f 91       	pop	r19
 2c0:	2f 91       	pop	r18
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <__vector_11>:
void __vector_11(void)//ISR of OVERFLOW timer0
{
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	2f 93       	push	r18
 2d8:	3f 93       	push	r19
 2da:	4f 93       	push	r20
 2dc:	5f 93       	push	r21
 2de:	6f 93       	push	r22
 2e0:	7f 93       	push	r23
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
 2e6:	af 93       	push	r26
 2e8:	bf 93       	push	r27
 2ea:	ef 93       	push	r30
 2ec:	ff 93       	push	r31
	(*Timer0_Call_Back_Ptr)();
 2ee:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <Timer0_Call_Back_Ptr>
 2f2:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <Timer0_Call_Back_Ptr+0x1>
 2f6:	09 95       	icall
}
 2f8:	ff 91       	pop	r31
 2fa:	ef 91       	pop	r30
 2fc:	bf 91       	pop	r27
 2fe:	af 91       	pop	r26
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	7f 91       	pop	r23
 306:	6f 91       	pop	r22
 308:	5f 91       	pop	r21
 30a:	4f 91       	pop	r20
 30c:	3f 91       	pop	r19
 30e:	2f 91       	pop	r18
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <__vector_4>:
void __vector_4(void)//ISR of COMPARE timer2
{
 31a:	1f 92       	push	r1
 31c:	0f 92       	push	r0
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	0f 92       	push	r0
 322:	11 24       	eor	r1, r1
 324:	2f 93       	push	r18
 326:	3f 93       	push	r19
 328:	4f 93       	push	r20
 32a:	5f 93       	push	r21
 32c:	6f 93       	push	r22
 32e:	7f 93       	push	r23
 330:	8f 93       	push	r24
 332:	9f 93       	push	r25
 334:	af 93       	push	r26
 336:	bf 93       	push	r27
 338:	ef 93       	push	r30
 33a:	ff 93       	push	r31
	(*Timer2_Call_Back_Ptr)();
 33c:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <Timer2_Call_Back_Ptr>
 340:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <Timer2_Call_Back_Ptr+0x1>
 344:	09 95       	icall
}
 346:	ff 91       	pop	r31
 348:	ef 91       	pop	r30
 34a:	bf 91       	pop	r27
 34c:	af 91       	pop	r26
 34e:	9f 91       	pop	r25
 350:	8f 91       	pop	r24
 352:	7f 91       	pop	r23
 354:	6f 91       	pop	r22
 356:	5f 91       	pop	r21
 358:	4f 91       	pop	r20
 35a:	3f 91       	pop	r19
 35c:	2f 91       	pop	r18
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <__vector_5>:
void __vector_5(void)//ISR of OVERFLOW timer2
{
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	2f 93       	push	r18
 374:	3f 93       	push	r19
 376:	4f 93       	push	r20
 378:	5f 93       	push	r21
 37a:	6f 93       	push	r22
 37c:	7f 93       	push	r23
 37e:	8f 93       	push	r24
 380:	9f 93       	push	r25
 382:	af 93       	push	r26
 384:	bf 93       	push	r27
 386:	ef 93       	push	r30
 388:	ff 93       	push	r31
	(*Timer2_Call_Back_Ptr)();
 38a:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <Timer2_Call_Back_Ptr>
 38e:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <Timer2_Call_Back_Ptr+0x1>
 392:	09 95       	icall
}
 394:	ff 91       	pop	r31
 396:	ef 91       	pop	r30
 398:	bf 91       	pop	r27
 39a:	af 91       	pop	r26
 39c:	9f 91       	pop	r25
 39e:	8f 91       	pop	r24
 3a0:	7f 91       	pop	r23
 3a2:	6f 91       	pop	r22
 3a4:	5f 91       	pop	r21
 3a6:	4f 91       	pop	r20
 3a8:	3f 91       	pop	r19
 3aa:	2f 91       	pop	r18
 3ac:	0f 90       	pop	r0
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	0f 90       	pop	r0
 3b2:	1f 90       	pop	r1
 3b4:	18 95       	reti

000003b6 <Timer_setCallBack>:
void Timer_setCallBack(Timers timer_num, void(*Ptr2Func)(void))
{
	switch(timer_num)
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	49 f0       	breq	.+18     	; 0x3cc <Timer_setCallBack+0x16>
 3ba:	18 f0       	brcs	.+6      	; 0x3c2 <Timer_setCallBack+0xc>
 3bc:	82 30       	cpi	r24, 0x02	; 2
 3be:	59 f0       	breq	.+22     	; 0x3d6 <Timer_setCallBack+0x20>
 3c0:	08 95       	ret
	{
		case timer0:
			Timer0_Call_Back_Ptr = Ptr2Func;
 3c2:	70 93 6e 00 	sts	0x006E, r23	; 0x80006e <Timer0_Call_Back_Ptr+0x1>
 3c6:	60 93 6d 00 	sts	0x006D, r22	; 0x80006d <Timer0_Call_Back_Ptr>
			break;
 3ca:	08 95       	ret
		case  timer1:
			Timer1_Call_Back_Ptr = Ptr2Func;
 3cc:	70 93 6c 00 	sts	0x006C, r23	; 0x80006c <Timer1_Call_Back_Ptr+0x1>
 3d0:	60 93 6b 00 	sts	0x006B, r22	; 0x80006b <Timer1_Call_Back_Ptr>
			break;
 3d4:	08 95       	ret
		case  timer2:
			Timer2_Call_Back_Ptr = Ptr2Func;
 3d6:	70 93 6a 00 	sts	0x006A, r23	; 0x80006a <Timer2_Call_Back_Ptr+0x1>
 3da:	60 93 69 00 	sts	0x0069, r22	; 0x800069 <Timer2_Call_Back_Ptr>
 3de:	08 95       	ret

000003e0 <Timer_init>:

/**************************************************************************************************************
 *                                            Initialization Function
 * ************************************************************************************************************/
void Timer_init(const config* conf)
{
 3e0:	fc 01       	movw	r30, r24
	if(conf->timer_num == timer0)
 3e2:	80 81       	ld	r24, Z
 3e4:	81 11       	cpse	r24, r1
 3e6:	b3 c0       	rjmp	.+358    	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
	{
		if(conf->timer_mode == normal)
 3e8:	81 81       	ldd	r24, Z+1	; 0x01
 3ea:	81 11       	cpse	r24, r1
 3ec:	54 c0       	rjmp	.+168    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
		{
			TCNT0 = 0; //set timer initial value to 0
 3ee:	12 be       	out	0x32, r1	; 50
			SETBIT(TIMSK,0); //enable overflow interrupt
 3f0:	89 b7       	in	r24, 0x39	; 57
 3f2:	81 60       	ori	r24, 0x01	; 1
 3f4:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR0,7); //set FOCO pin non_pwm mode
 3f6:	83 b7       	in	r24, 0x33	; 51
 3f8:	80 68       	ori	r24, 0x80	; 128
 3fa:	83 bf       	out	0x33, r24	; 51
			switch(conf->timer_preScale)
 3fc:	82 81       	ldd	r24, Z+2	; 0x02
 3fe:	82 30       	cpi	r24, 0x02	; 2
 400:	11 f1       	breq	.+68     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 402:	28 f4       	brcc	.+10     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 404:	88 23       	and	r24, r24
 406:	59 f0       	breq	.+22     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 408:	81 30       	cpi	r24, 0x01	; 1
 40a:	99 f0       	breq	.+38     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 40c:	08 95       	ret
 40e:	86 30       	cpi	r24, 0x06	; 6
 410:	71 f1       	breq	.+92     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 412:	87 30       	cpi	r24, 0x07	; 7
 414:	b1 f1       	breq	.+108    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 416:	85 30       	cpi	r24, 0x05	; 5
 418:	09 f0       	breq	.+2      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41a:	33 c2       	rjmp	.+1126   	; 0x882 <__stack+0x23>
 41c:	1e c0       	rjmp	.+60     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
			{
				case no_clock:
					CLRBIT(TCCR0,0);
 41e:	83 b7       	in	r24, 0x33	; 51
 420:	8e 7f       	andi	r24, 0xFE	; 254
 422:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 424:	83 b7       	in	r24, 0x33	; 51
 426:	8d 7f       	andi	r24, 0xFD	; 253
 428:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 42a:	83 b7       	in	r24, 0x33	; 51
 42c:	8b 7f       	andi	r24, 0xFB	; 251
 42e:	83 bf       	out	0x33, r24	; 51
					break;
 430:	08 95       	ret
				case f_cpu_clk:
					SETBIT(TCCR0,0);
 432:	83 b7       	in	r24, 0x33	; 51
 434:	81 60       	ori	r24, 0x01	; 1
 436:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 438:	83 b7       	in	r24, 0x33	; 51
 43a:	8d 7f       	andi	r24, 0xFD	; 253
 43c:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 43e:	83 b7       	in	r24, 0x33	; 51
 440:	8b 7f       	andi	r24, 0xFB	; 251
 442:	83 bf       	out	0x33, r24	; 51
					break;
 444:	08 95       	ret
				case f_cpu_clk_8:
					CLRBIT(TCCR0,0);
 446:	83 b7       	in	r24, 0x33	; 51
 448:	8e 7f       	andi	r24, 0xFE	; 254
 44a:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
 44c:	83 b7       	in	r24, 0x33	; 51
 44e:	82 60       	ori	r24, 0x02	; 2
 450:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 452:	83 b7       	in	r24, 0x33	; 51
 454:	8b 7f       	andi	r24, 0xFB	; 251
 456:	83 bf       	out	0x33, r24	; 51
					break;	
 458:	08 95       	ret
				case f_cpu_clk_32:
					break;
				case f_cpu_clk_64:
					SETBIT(TCCR0,0);
 45a:	83 b7       	in	r24, 0x33	; 51
 45c:	81 60       	ori	r24, 0x01	; 1
 45e:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
 460:	83 b7       	in	r24, 0x33	; 51
 462:	82 60       	ori	r24, 0x02	; 2
 464:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 466:	83 b7       	in	r24, 0x33	; 51
 468:	8b 7f       	andi	r24, 0xFB	; 251
 46a:	83 bf       	out	0x33, r24	; 51
					break;
 46c:	08 95       	ret
				case f_cpu_clk_128:
					break;	
				case f_cpu_clk_256:
					CLRBIT(TCCR0,0);
 46e:	83 b7       	in	r24, 0x33	; 51
 470:	8e 7f       	andi	r24, 0xFE	; 254
 472:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 474:	83 b7       	in	r24, 0x33	; 51
 476:	8d 7f       	andi	r24, 0xFD	; 253
 478:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
 47a:	83 b7       	in	r24, 0x33	; 51
 47c:	84 60       	ori	r24, 0x04	; 4
 47e:	83 bf       	out	0x33, r24	; 51
					break;	
 480:	08 95       	ret
				case f_cpu_clk_1024:
					SETBIT(TCCR0,0);
 482:	83 b7       	in	r24, 0x33	; 51
 484:	81 60       	ori	r24, 0x01	; 1
 486:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 488:	83 b7       	in	r24, 0x33	; 51
 48a:	8d 7f       	andi	r24, 0xFD	; 253
 48c:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
 48e:	83 b7       	in	r24, 0x33	; 51
 490:	84 60       	ori	r24, 0x04	; 4
 492:	83 bf       	out	0x33, r24	; 51
					break;
 494:	08 95       	ret
			}
		}
		else if(conf->timer_mode == compare)
 496:	81 30       	cpi	r24, 0x01	; 1
 498:	09 f0       	breq	.+2      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 49a:	f3 c1       	rjmp	.+998    	; 0x882 <__stack+0x23>
		{
			TCNT0 = 0; //set timer initial value to 0
 49c:	12 be       	out	0x32, r1	; 50
			SETBIT(TIMSK,1); //enable compare interrupt	
 49e:	89 b7       	in	r24, 0x39	; 57
 4a0:	82 60       	ori	r24, 0x02	; 2
 4a2:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR0,3);//set FOCO pin non_pwm mode and WGM
 4a4:	83 b7       	in	r24, 0x33	; 51
 4a6:	88 60       	ori	r24, 0x08	; 8
 4a8:	83 bf       	out	0x33, r24	; 51
			SETBIT(TCCR0,7);//set FOCO pin non_pwm mode and WGM
 4aa:	83 b7       	in	r24, 0x33	; 51
 4ac:	80 68       	ori	r24, 0x80	; 128
 4ae:	83 bf       	out	0x33, r24	; 51
			OCR0  = conf->ticks_num; //set the compare value
 4b0:	83 81       	ldd	r24, Z+3	; 0x03
 4b2:	8c bf       	out	0x3c, r24	; 60
			switch(conf->timer_preScale)
 4b4:	82 81       	ldd	r24, Z+2	; 0x02
 4b6:	82 30       	cpi	r24, 0x02	; 2
 4b8:	11 f1       	breq	.+68     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4ba:	28 f4       	brcc	.+10     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4bc:	88 23       	and	r24, r24
 4be:	59 f0       	breq	.+22     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4c0:	81 30       	cpi	r24, 0x01	; 1
 4c2:	99 f0       	breq	.+38     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4c4:	08 95       	ret
 4c6:	86 30       	cpi	r24, 0x06	; 6
 4c8:	71 f1       	breq	.+92     	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
 4ca:	87 30       	cpi	r24, 0x07	; 7
 4cc:	b1 f1       	breq	.+108    	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 4ce:	85 30       	cpi	r24, 0x05	; 5
 4d0:	09 f0       	breq	.+2      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 4d2:	d7 c1       	rjmp	.+942    	; 0x882 <__stack+0x23>
 4d4:	1e c0       	rjmp	.+60     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
			{
				case no_clock:
				CLRBIT(TCCR0,0);
 4d6:	83 b7       	in	r24, 0x33	; 51
 4d8:	8e 7f       	andi	r24, 0xFE	; 254
 4da:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,1);
 4dc:	83 b7       	in	r24, 0x33	; 51
 4de:	8d 7f       	andi	r24, 0xFD	; 253
 4e0:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,2);
 4e2:	83 b7       	in	r24, 0x33	; 51
 4e4:	8b 7f       	andi	r24, 0xFB	; 251
 4e6:	83 bf       	out	0x33, r24	; 51
				break;
 4e8:	08 95       	ret
				case f_cpu_clk:
				SETBIT(TCCR0,0);
 4ea:	83 b7       	in	r24, 0x33	; 51
 4ec:	81 60       	ori	r24, 0x01	; 1
 4ee:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,1);
 4f0:	83 b7       	in	r24, 0x33	; 51
 4f2:	8d 7f       	andi	r24, 0xFD	; 253
 4f4:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,2);
 4f6:	83 b7       	in	r24, 0x33	; 51
 4f8:	8b 7f       	andi	r24, 0xFB	; 251
 4fa:	83 bf       	out	0x33, r24	; 51
				break;
 4fc:	08 95       	ret
				case f_cpu_clk_8:
				CLRBIT(TCCR0,0);
 4fe:	83 b7       	in	r24, 0x33	; 51
 500:	8e 7f       	andi	r24, 0xFE	; 254
 502:	83 bf       	out	0x33, r24	; 51
				SETBIT(TCCR0,1);
 504:	83 b7       	in	r24, 0x33	; 51
 506:	82 60       	ori	r24, 0x02	; 2
 508:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,2);
 50a:	83 b7       	in	r24, 0x33	; 51
 50c:	8b 7f       	andi	r24, 0xFB	; 251
 50e:	83 bf       	out	0x33, r24	; 51
				break;
 510:	08 95       	ret
				case f_cpu_clk_32:
				break;
				case f_cpu_clk_64:
				SETBIT(TCCR0,0);
 512:	83 b7       	in	r24, 0x33	; 51
 514:	81 60       	ori	r24, 0x01	; 1
 516:	83 bf       	out	0x33, r24	; 51
				SETBIT(TCCR0,1);
 518:	83 b7       	in	r24, 0x33	; 51
 51a:	82 60       	ori	r24, 0x02	; 2
 51c:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,2);
 51e:	83 b7       	in	r24, 0x33	; 51
 520:	8b 7f       	andi	r24, 0xFB	; 251
 522:	83 bf       	out	0x33, r24	; 51
				break;
 524:	08 95       	ret
				case f_cpu_clk_128:
				break;
				case f_cpu_clk_256:
				CLRBIT(TCCR0,0);
 526:	83 b7       	in	r24, 0x33	; 51
 528:	8e 7f       	andi	r24, 0xFE	; 254
 52a:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,1);
 52c:	83 b7       	in	r24, 0x33	; 51
 52e:	8d 7f       	andi	r24, 0xFD	; 253
 530:	83 bf       	out	0x33, r24	; 51
				SETBIT(TCCR0,2);
 532:	83 b7       	in	r24, 0x33	; 51
 534:	84 60       	ori	r24, 0x04	; 4
 536:	83 bf       	out	0x33, r24	; 51
				break;
 538:	08 95       	ret
				case f_cpu_clk_1024:
				SETBIT(TCCR0,0);
 53a:	83 b7       	in	r24, 0x33	; 51
 53c:	81 60       	ori	r24, 0x01	; 1
 53e:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,1);
 540:	83 b7       	in	r24, 0x33	; 51
 542:	8d 7f       	andi	r24, 0xFD	; 253
 544:	83 bf       	out	0x33, r24	; 51
				SETBIT(TCCR0,2);
 546:	83 b7       	in	r24, 0x33	; 51
 548:	84 60       	ori	r24, 0x04	; 4
 54a:	83 bf       	out	0x33, r24	; 51
				break;
 54c:	08 95       	ret
			}
		}
	}
	else if(conf->timer_num == timer1)
 54e:	81 30       	cpi	r24, 0x01	; 1
 550:	09 f0       	breq	.+2      	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
 552:	c4 c0       	rjmp	.+392    	; 0x6dc <__EEPROM_REGION_LENGTH__+0x2dc>
	{
		if(conf->timer_mode == normal)
 554:	81 81       	ldd	r24, Z+1	; 0x01
 556:	81 11       	cpse	r24, r1
 558:	58 c0       	rjmp	.+176    	; 0x60a <__EEPROM_REGION_LENGTH__+0x20a>
		{
			TCNT1H = 0; //set timer initial value to 0
 55a:	1d bc       	out	0x2d, r1	; 45
			TCNT1L = 0;
 55c:	1c bc       	out	0x2c, r1	; 44
			SETBIT(TIMSK,2); //enable overflow interrupt
 55e:	89 b7       	in	r24, 0x39	; 57
 560:	84 60       	ori	r24, 0x04	; 4
 562:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR1A,2); //non_pwm mode
 564:	8f b5       	in	r24, 0x2f	; 47
 566:	84 60       	ori	r24, 0x04	; 4
 568:	8f bd       	out	0x2f, r24	; 47
			SETBIT(TCCR1A,3); //non_pwm mode
 56a:	8f b5       	in	r24, 0x2f	; 47
 56c:	88 60       	ori	r24, 0x08	; 8
 56e:	8f bd       	out	0x2f, r24	; 47
			switch(conf->timer_preScale)
 570:	82 81       	ldd	r24, Z+2	; 0x02
 572:	82 30       	cpi	r24, 0x02	; 2
 574:	11 f1       	breq	.+68     	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
 576:	28 f4       	brcc	.+10     	; 0x582 <__EEPROM_REGION_LENGTH__+0x182>
 578:	88 23       	and	r24, r24
 57a:	59 f0       	breq	.+22     	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
 57c:	81 30       	cpi	r24, 0x01	; 1
 57e:	99 f0       	breq	.+38     	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
 580:	08 95       	ret
 582:	86 30       	cpi	r24, 0x06	; 6
 584:	71 f1       	breq	.+92     	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
 586:	87 30       	cpi	r24, 0x07	; 7
 588:	b1 f1       	breq	.+108    	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
 58a:	85 30       	cpi	r24, 0x05	; 5
 58c:	09 f0       	breq	.+2      	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
 58e:	79 c1       	rjmp	.+754    	; 0x882 <__stack+0x23>
 590:	1e c0       	rjmp	.+60     	; 0x5ce <__EEPROM_REGION_LENGTH__+0x1ce>
			{
				case no_clock:
				CLRBIT(TCCR1B,0);
 592:	8e b5       	in	r24, 0x2e	; 46
 594:	8e 7f       	andi	r24, 0xFE	; 254
 596:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
 598:	8e b5       	in	r24, 0x2e	; 46
 59a:	8d 7f       	andi	r24, 0xFD	; 253
 59c:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
 59e:	8e b5       	in	r24, 0x2e	; 46
 5a0:	8b 7f       	andi	r24, 0xFB	; 251
 5a2:	8e bd       	out	0x2e, r24	; 46
				break;
 5a4:	08 95       	ret
				case f_cpu_clk:
				SETBIT(TCCR1B,0);
 5a6:	8e b5       	in	r24, 0x2e	; 46
 5a8:	81 60       	ori	r24, 0x01	; 1
 5aa:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
 5ac:	8e b5       	in	r24, 0x2e	; 46
 5ae:	8d 7f       	andi	r24, 0xFD	; 253
 5b0:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
 5b2:	8e b5       	in	r24, 0x2e	; 46
 5b4:	8b 7f       	andi	r24, 0xFB	; 251
 5b6:	8e bd       	out	0x2e, r24	; 46
				break;
 5b8:	08 95       	ret
				case f_cpu_clk_8:
				CLRBIT(TCCR1B,0);
 5ba:	8e b5       	in	r24, 0x2e	; 46
 5bc:	8e 7f       	andi	r24, 0xFE	; 254
 5be:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,1);
 5c0:	8e b5       	in	r24, 0x2e	; 46
 5c2:	82 60       	ori	r24, 0x02	; 2
 5c4:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
 5c6:	8e b5       	in	r24, 0x2e	; 46
 5c8:	8b 7f       	andi	r24, 0xFB	; 251
 5ca:	8e bd       	out	0x2e, r24	; 46
				break;
 5cc:	08 95       	ret
				case f_cpu_clk_32:
				break;
				case f_cpu_clk_64:
				SETBIT(TCCR1B,0);
 5ce:	8e b5       	in	r24, 0x2e	; 46
 5d0:	81 60       	ori	r24, 0x01	; 1
 5d2:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,1);
 5d4:	8e b5       	in	r24, 0x2e	; 46
 5d6:	82 60       	ori	r24, 0x02	; 2
 5d8:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
 5da:	8e b5       	in	r24, 0x2e	; 46
 5dc:	8b 7f       	andi	r24, 0xFB	; 251
 5de:	8e bd       	out	0x2e, r24	; 46
				break;
 5e0:	08 95       	ret
				case f_cpu_clk_128:
				break;
				case f_cpu_clk_256:
				CLRBIT(TCCR1B,0);
 5e2:	8e b5       	in	r24, 0x2e	; 46
 5e4:	8e 7f       	andi	r24, 0xFE	; 254
 5e6:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
 5e8:	8e b5       	in	r24, 0x2e	; 46
 5ea:	8d 7f       	andi	r24, 0xFD	; 253
 5ec:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,2);
 5ee:	8e b5       	in	r24, 0x2e	; 46
 5f0:	84 60       	ori	r24, 0x04	; 4
 5f2:	8e bd       	out	0x2e, r24	; 46
				break;
 5f4:	08 95       	ret
				case f_cpu_clk_1024:
				SETBIT(TCCR1B,0);
 5f6:	8e b5       	in	r24, 0x2e	; 46
 5f8:	81 60       	ori	r24, 0x01	; 1
 5fa:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
 5fc:	8e b5       	in	r24, 0x2e	; 46
 5fe:	8d 7f       	andi	r24, 0xFD	; 253
 600:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,2);
 602:	8e b5       	in	r24, 0x2e	; 46
 604:	84 60       	ori	r24, 0x04	; 4
 606:	8e bd       	out	0x2e, r24	; 46
				break;
 608:	08 95       	ret
			}
			
		}
		else if(conf->timer_mode == compare)
 60a:	81 30       	cpi	r24, 0x01	; 1
 60c:	09 f0       	breq	.+2      	; 0x610 <__EEPROM_REGION_LENGTH__+0x210>
 60e:	39 c1       	rjmp	.+626    	; 0x882 <__stack+0x23>
		{
			TCNT1H = 0; //set timer initial value to 0
 610:	1d bc       	out	0x2d, r1	; 45
			TCNT1L = 0;
 612:	1c bc       	out	0x2c, r1	; 44
			SETBIT(TIMSK,4); //enable compare interrupt
 614:	89 b7       	in	r24, 0x39	; 57
 616:	80 61       	ori	r24, 0x10	; 16
 618:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR1A,2); //non_pwm mode
 61a:	8f b5       	in	r24, 0x2f	; 47
 61c:	84 60       	ori	r24, 0x04	; 4
 61e:	8f bd       	out	0x2f, r24	; 47
			SETBIT(TCCR1A,3); //non_pwm mode
 620:	8f b5       	in	r24, 0x2f	; 47
 622:	88 60       	ori	r24, 0x08	; 8
 624:	8f bd       	out	0x2f, r24	; 47
			OCR1AH = (uint8_t) (conf->ticks_num >> 8);
 626:	83 81       	ldd	r24, Z+3	; 0x03
 628:	94 81       	ldd	r25, Z+4	; 0x04
 62a:	a5 81       	ldd	r26, Z+5	; 0x05
 62c:	b6 81       	ldd	r27, Z+6	; 0x06
 62e:	89 2f       	mov	r24, r25
 630:	9a 2f       	mov	r25, r26
 632:	ab 2f       	mov	r26, r27
 634:	bb 27       	eor	r27, r27
 636:	8b bd       	out	0x2b, r24	; 43
			OCR1AL = (uint8_t)(conf->ticks_num & (0X00FF));
 638:	83 81       	ldd	r24, Z+3	; 0x03
 63a:	8a bd       	out	0x2a, r24	; 42
			SETBIT(TCCR1B,3);
 63c:	8e b5       	in	r24, 0x2e	; 46
 63e:	88 60       	ori	r24, 0x08	; 8
 640:	8e bd       	out	0x2e, r24	; 46
			switch(conf->timer_preScale)
 642:	82 81       	ldd	r24, Z+2	; 0x02
 644:	82 30       	cpi	r24, 0x02	; 2
 646:	11 f1       	breq	.+68     	; 0x68c <__EEPROM_REGION_LENGTH__+0x28c>
 648:	28 f4       	brcc	.+10     	; 0x654 <__EEPROM_REGION_LENGTH__+0x254>
 64a:	88 23       	and	r24, r24
 64c:	59 f0       	breq	.+22     	; 0x664 <__EEPROM_REGION_LENGTH__+0x264>
 64e:	81 30       	cpi	r24, 0x01	; 1
 650:	99 f0       	breq	.+38     	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
 652:	08 95       	ret
 654:	86 30       	cpi	r24, 0x06	; 6
 656:	71 f1       	breq	.+92     	; 0x6b4 <__EEPROM_REGION_LENGTH__+0x2b4>
 658:	87 30       	cpi	r24, 0x07	; 7
 65a:	b1 f1       	breq	.+108    	; 0x6c8 <__EEPROM_REGION_LENGTH__+0x2c8>
 65c:	85 30       	cpi	r24, 0x05	; 5
 65e:	09 f0       	breq	.+2      	; 0x662 <__EEPROM_REGION_LENGTH__+0x262>
 660:	10 c1       	rjmp	.+544    	; 0x882 <__stack+0x23>
 662:	1e c0       	rjmp	.+60     	; 0x6a0 <__EEPROM_REGION_LENGTH__+0x2a0>
			{
				case no_clock:
				CLRBIT(TCCR1B,0);
 664:	8e b5       	in	r24, 0x2e	; 46
 666:	8e 7f       	andi	r24, 0xFE	; 254
 668:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
 66a:	8e b5       	in	r24, 0x2e	; 46
 66c:	8d 7f       	andi	r24, 0xFD	; 253
 66e:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
 670:	8e b5       	in	r24, 0x2e	; 46
 672:	8b 7f       	andi	r24, 0xFB	; 251
 674:	8e bd       	out	0x2e, r24	; 46
				break;
 676:	08 95       	ret
				case f_cpu_clk:
				SETBIT(TCCR1B,0);
 678:	8e b5       	in	r24, 0x2e	; 46
 67a:	81 60       	ori	r24, 0x01	; 1
 67c:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
 67e:	8e b5       	in	r24, 0x2e	; 46
 680:	8d 7f       	andi	r24, 0xFD	; 253
 682:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
 684:	8e b5       	in	r24, 0x2e	; 46
 686:	8b 7f       	andi	r24, 0xFB	; 251
 688:	8e bd       	out	0x2e, r24	; 46
				break;
 68a:	08 95       	ret
				case f_cpu_clk_8:
				CLRBIT(TCCR1B,0);
 68c:	8e b5       	in	r24, 0x2e	; 46
 68e:	8e 7f       	andi	r24, 0xFE	; 254
 690:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,1);
 692:	8e b5       	in	r24, 0x2e	; 46
 694:	82 60       	ori	r24, 0x02	; 2
 696:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
 698:	8e b5       	in	r24, 0x2e	; 46
 69a:	8b 7f       	andi	r24, 0xFB	; 251
 69c:	8e bd       	out	0x2e, r24	; 46
				break;
 69e:	08 95       	ret
				case f_cpu_clk_32:
				break;
				case f_cpu_clk_64:
				SETBIT(TCCR1B,0);
 6a0:	8e b5       	in	r24, 0x2e	; 46
 6a2:	81 60       	ori	r24, 0x01	; 1
 6a4:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,1);
 6a6:	8e b5       	in	r24, 0x2e	; 46
 6a8:	82 60       	ori	r24, 0x02	; 2
 6aa:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
 6ac:	8e b5       	in	r24, 0x2e	; 46
 6ae:	8b 7f       	andi	r24, 0xFB	; 251
 6b0:	8e bd       	out	0x2e, r24	; 46
				break;
 6b2:	08 95       	ret
				case f_cpu_clk_128:
				break;
				case f_cpu_clk_256:
				CLRBIT(TCCR1B,0);
 6b4:	8e b5       	in	r24, 0x2e	; 46
 6b6:	8e 7f       	andi	r24, 0xFE	; 254
 6b8:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
 6ba:	8e b5       	in	r24, 0x2e	; 46
 6bc:	8d 7f       	andi	r24, 0xFD	; 253
 6be:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,2);
 6c0:	8e b5       	in	r24, 0x2e	; 46
 6c2:	84 60       	ori	r24, 0x04	; 4
 6c4:	8e bd       	out	0x2e, r24	; 46
				break;
 6c6:	08 95       	ret
				case f_cpu_clk_1024:
				SETBIT(TCCR1B,0);
 6c8:	8e b5       	in	r24, 0x2e	; 46
 6ca:	81 60       	ori	r24, 0x01	; 1
 6cc:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
 6ce:	8e b5       	in	r24, 0x2e	; 46
 6d0:	8d 7f       	andi	r24, 0xFD	; 253
 6d2:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,2);
 6d4:	8e b5       	in	r24, 0x2e	; 46
 6d6:	84 60       	ori	r24, 0x04	; 4
 6d8:	8e bd       	out	0x2e, r24	; 46
				break;
 6da:	08 95       	ret
			}
		}	
	}
	else if(conf->timer_num == timer2)
 6dc:	82 30       	cpi	r24, 0x02	; 2
 6de:	09 f0       	breq	.+2      	; 0x6e2 <__EEPROM_REGION_LENGTH__+0x2e2>
 6e0:	d0 c0       	rjmp	.+416    	; 0x882 <__stack+0x23>
	{
		if(conf->timer_mode == normal)
 6e2:	81 81       	ldd	r24, Z+1	; 0x01
 6e4:	81 11       	cpse	r24, r1
 6e6:	63 c0       	rjmp	.+198    	; 0x7ae <__EEPROM_REGION_LENGTH__+0x3ae>
		{
			TCNT2 = 0; //set timer initial value to 0
 6e8:	14 bc       	out	0x24, r1	; 36
			SETBIT(TIMSK,6); //enable overflow interrupt
 6ea:	89 b7       	in	r24, 0x39	; 57
 6ec:	80 64       	ori	r24, 0x40	; 64
 6ee:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR2,7); //set FOCO pin non_pwm mode
 6f0:	85 b5       	in	r24, 0x25	; 37
 6f2:	80 68       	ori	r24, 0x80	; 128
 6f4:	85 bd       	out	0x25, r24	; 37
			switch(conf->timer_preScale)
 6f6:	e2 81       	ldd	r30, Z+2	; 0x02
 6f8:	8e 2f       	mov	r24, r30
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	88 30       	cpi	r24, 0x08	; 8
 6fe:	91 05       	cpc	r25, r1
 700:	08 f0       	brcs	.+2      	; 0x704 <__EEPROM_REGION_LENGTH__+0x304>
 702:	bf c0       	rjmp	.+382    	; 0x882 <__stack+0x23>
 704:	fc 01       	movw	r30, r24
 706:	e6 5d       	subi	r30, 0xD6	; 214
 708:	ff 4f       	sbci	r31, 0xFF	; 255
 70a:	0c 94 42 04 	jmp	0x884	; 0x884 <__tablejump2__>
			{
				case no_clock:
					CLRBIT(TCCR0,0);
 70e:	83 b7       	in	r24, 0x33	; 51
 710:	8e 7f       	andi	r24, 0xFE	; 254
 712:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 714:	83 b7       	in	r24, 0x33	; 51
 716:	8d 7f       	andi	r24, 0xFD	; 253
 718:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 71a:	83 b7       	in	r24, 0x33	; 51
 71c:	8b 7f       	andi	r24, 0xFB	; 251
 71e:	83 bf       	out	0x33, r24	; 51
					break;
 720:	08 95       	ret
				case f_cpu_clk:
					SETBIT(TCCR0,0);
 722:	83 b7       	in	r24, 0x33	; 51
 724:	81 60       	ori	r24, 0x01	; 1
 726:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 728:	83 b7       	in	r24, 0x33	; 51
 72a:	8d 7f       	andi	r24, 0xFD	; 253
 72c:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 72e:	83 b7       	in	r24, 0x33	; 51
 730:	8b 7f       	andi	r24, 0xFB	; 251
 732:	83 bf       	out	0x33, r24	; 51
					break;
 734:	08 95       	ret
				case f_cpu_clk_8:
					CLRBIT(TCCR0,0);
 736:	83 b7       	in	r24, 0x33	; 51
 738:	8e 7f       	andi	r24, 0xFE	; 254
 73a:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
 73c:	83 b7       	in	r24, 0x33	; 51
 73e:	82 60       	ori	r24, 0x02	; 2
 740:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 742:	83 b7       	in	r24, 0x33	; 51
 744:	8b 7f       	andi	r24, 0xFB	; 251
 746:	83 bf       	out	0x33, r24	; 51
					break;
 748:	08 95       	ret
				case f_cpu_clk_32:
					SETBIT(TCCR0,0);
 74a:	83 b7       	in	r24, 0x33	; 51
 74c:	81 60       	ori	r24, 0x01	; 1
 74e:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
 750:	83 b7       	in	r24, 0x33	; 51
 752:	82 60       	ori	r24, 0x02	; 2
 754:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 756:	83 b7       	in	r24, 0x33	; 51
 758:	8b 7f       	andi	r24, 0xFB	; 251
 75a:	83 bf       	out	0x33, r24	; 51
					break;
 75c:	08 95       	ret
				case f_cpu_clk_64:
					CLRBIT(TCCR0,0);
 75e:	83 b7       	in	r24, 0x33	; 51
 760:	8e 7f       	andi	r24, 0xFE	; 254
 762:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 764:	83 b7       	in	r24, 0x33	; 51
 766:	8d 7f       	andi	r24, 0xFD	; 253
 768:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
 76a:	83 b7       	in	r24, 0x33	; 51
 76c:	84 60       	ori	r24, 0x04	; 4
 76e:	83 bf       	out	0x33, r24	; 51
					break;
 770:	08 95       	ret
				case f_cpu_clk_128:
					SETBIT(TCCR0,0);
 772:	83 b7       	in	r24, 0x33	; 51
 774:	81 60       	ori	r24, 0x01	; 1
 776:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 778:	83 b7       	in	r24, 0x33	; 51
 77a:	8d 7f       	andi	r24, 0xFD	; 253
 77c:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
 77e:	83 b7       	in	r24, 0x33	; 51
 780:	84 60       	ori	r24, 0x04	; 4
 782:	83 bf       	out	0x33, r24	; 51
					break;
 784:	08 95       	ret
				case f_cpu_clk_256:
					CLRBIT(TCCR0,0);
 786:	83 b7       	in	r24, 0x33	; 51
 788:	8e 7f       	andi	r24, 0xFE	; 254
 78a:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
 78c:	83 b7       	in	r24, 0x33	; 51
 78e:	82 60       	ori	r24, 0x02	; 2
 790:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
 792:	83 b7       	in	r24, 0x33	; 51
 794:	84 60       	ori	r24, 0x04	; 4
 796:	83 bf       	out	0x33, r24	; 51
					break;
 798:	08 95       	ret
				case f_cpu_clk_1024:
					SETBIT(TCCR0,0);
 79a:	83 b7       	in	r24, 0x33	; 51
 79c:	81 60       	ori	r24, 0x01	; 1
 79e:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
 7a0:	83 b7       	in	r24, 0x33	; 51
 7a2:	82 60       	ori	r24, 0x02	; 2
 7a4:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
 7a6:	83 b7       	in	r24, 0x33	; 51
 7a8:	84 60       	ori	r24, 0x04	; 4
 7aa:	83 bf       	out	0x33, r24	; 51
					break;
 7ac:	08 95       	ret
			}	
		}
		else if(conf->timer_mode == compare)
 7ae:	81 30       	cpi	r24, 0x01	; 1
 7b0:	09 f0       	breq	.+2      	; 0x7b4 <__EEPROM_REGION_LENGTH__+0x3b4>
 7b2:	67 c0       	rjmp	.+206    	; 0x882 <__stack+0x23>
		{
			TCNT2 = 0; //set timer initial value to 0
 7b4:	14 bc       	out	0x24, r1	; 36
			SETBIT(TIMSK,7); //enable compare interrupt
 7b6:	89 b7       	in	r24, 0x39	; 57
 7b8:	80 68       	ori	r24, 0x80	; 128
 7ba:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR2,3);//set FOCO pin non_pwm mode and WGM
 7bc:	85 b5       	in	r24, 0x25	; 37
 7be:	88 60       	ori	r24, 0x08	; 8
 7c0:	85 bd       	out	0x25, r24	; 37
			SETBIT(TCCR2,7);//set FOCO pin non_pwm mode and WGM
 7c2:	85 b5       	in	r24, 0x25	; 37
 7c4:	80 68       	ori	r24, 0x80	; 128
 7c6:	85 bd       	out	0x25, r24	; 37
			OCR2  = conf->ticks_num; //set the compare value
 7c8:	83 81       	ldd	r24, Z+3	; 0x03
 7ca:	83 bd       	out	0x23, r24	; 35
			switch(conf->timer_preScale)
 7cc:	e2 81       	ldd	r30, Z+2	; 0x02
 7ce:	8e 2f       	mov	r24, r30
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	88 30       	cpi	r24, 0x08	; 8
 7d4:	91 05       	cpc	r25, r1
 7d6:	08 f0       	brcs	.+2      	; 0x7da <__EEPROM_REGION_LENGTH__+0x3da>
 7d8:	54 c0       	rjmp	.+168    	; 0x882 <__stack+0x23>
 7da:	fc 01       	movw	r30, r24
 7dc:	ee 5c       	subi	r30, 0xCE	; 206
 7de:	ff 4f       	sbci	r31, 0xFF	; 255
 7e0:	0c 94 42 04 	jmp	0x884	; 0x884 <__tablejump2__>
			{
				case no_clock:
					CLRBIT(TCCR0,0);
 7e4:	83 b7       	in	r24, 0x33	; 51
 7e6:	8e 7f       	andi	r24, 0xFE	; 254
 7e8:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 7ea:	83 b7       	in	r24, 0x33	; 51
 7ec:	8d 7f       	andi	r24, 0xFD	; 253
 7ee:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 7f0:	83 b7       	in	r24, 0x33	; 51
 7f2:	8b 7f       	andi	r24, 0xFB	; 251
 7f4:	83 bf       	out	0x33, r24	; 51
					break;
 7f6:	08 95       	ret
				case f_cpu_clk:
					SETBIT(TCCR0,0);
 7f8:	83 b7       	in	r24, 0x33	; 51
 7fa:	81 60       	ori	r24, 0x01	; 1
 7fc:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 7fe:	83 b7       	in	r24, 0x33	; 51
 800:	8d 7f       	andi	r24, 0xFD	; 253
 802:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 804:	83 b7       	in	r24, 0x33	; 51
 806:	8b 7f       	andi	r24, 0xFB	; 251
 808:	83 bf       	out	0x33, r24	; 51
					break;
 80a:	08 95       	ret
				case f_cpu_clk_8:
					CLRBIT(TCCR0,0);
 80c:	83 b7       	in	r24, 0x33	; 51
 80e:	8e 7f       	andi	r24, 0xFE	; 254
 810:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
 812:	83 b7       	in	r24, 0x33	; 51
 814:	82 60       	ori	r24, 0x02	; 2
 816:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 818:	83 b7       	in	r24, 0x33	; 51
 81a:	8b 7f       	andi	r24, 0xFB	; 251
 81c:	83 bf       	out	0x33, r24	; 51
					break;
 81e:	08 95       	ret
				case f_cpu_clk_32:
					SETBIT(TCCR0,0);
 820:	83 b7       	in	r24, 0x33	; 51
 822:	81 60       	ori	r24, 0x01	; 1
 824:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
 826:	83 b7       	in	r24, 0x33	; 51
 828:	82 60       	ori	r24, 0x02	; 2
 82a:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 82c:	83 b7       	in	r24, 0x33	; 51
 82e:	8b 7f       	andi	r24, 0xFB	; 251
 830:	83 bf       	out	0x33, r24	; 51
					break;
 832:	08 95       	ret
				case f_cpu_clk_64:
					CLRBIT(TCCR0,0);
 834:	83 b7       	in	r24, 0x33	; 51
 836:	8e 7f       	andi	r24, 0xFE	; 254
 838:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 83a:	83 b7       	in	r24, 0x33	; 51
 83c:	8d 7f       	andi	r24, 0xFD	; 253
 83e:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
 840:	83 b7       	in	r24, 0x33	; 51
 842:	84 60       	ori	r24, 0x04	; 4
 844:	83 bf       	out	0x33, r24	; 51
					break;
 846:	08 95       	ret
				case f_cpu_clk_128:
					SETBIT(TCCR0,0);
 848:	83 b7       	in	r24, 0x33	; 51
 84a:	81 60       	ori	r24, 0x01	; 1
 84c:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 84e:	83 b7       	in	r24, 0x33	; 51
 850:	8d 7f       	andi	r24, 0xFD	; 253
 852:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
 854:	83 b7       	in	r24, 0x33	; 51
 856:	84 60       	ori	r24, 0x04	; 4
 858:	83 bf       	out	0x33, r24	; 51
					break;
 85a:	08 95       	ret
				case f_cpu_clk_256:
					CLRBIT(TCCR0,0);
 85c:	83 b7       	in	r24, 0x33	; 51
 85e:	8e 7f       	andi	r24, 0xFE	; 254
 860:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
 862:	83 b7       	in	r24, 0x33	; 51
 864:	82 60       	ori	r24, 0x02	; 2
 866:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
 868:	83 b7       	in	r24, 0x33	; 51
 86a:	84 60       	ori	r24, 0x04	; 4
 86c:	83 bf       	out	0x33, r24	; 51
					break;
 86e:	08 95       	ret
				case f_cpu_clk_1024:
					SETBIT(TCCR0,0);
 870:	83 b7       	in	r24, 0x33	; 51
 872:	81 60       	ori	r24, 0x01	; 1
 874:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
 876:	83 b7       	in	r24, 0x33	; 51
 878:	82 60       	ori	r24, 0x02	; 2
 87a:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
 87c:	83 b7       	in	r24, 0x33	; 51
 87e:	84 60       	ori	r24, 0x04	; 4
 880:	83 bf       	out	0x33, r24	; 51
 882:	08 95       	ret

00000884 <__tablejump2__>:
 884:	ee 0f       	add	r30, r30
 886:	ff 1f       	adc	r31, r31
 888:	05 90       	lpm	r0, Z+
 88a:	f4 91       	lpm	r31, Z
 88c:	e0 2d       	mov	r30, r0
 88e:	09 94       	ijmp

00000890 <_exit>:
 890:	f8 94       	cli

00000892 <__stop_program>:
 892:	ff cf       	rjmp	.-2      	; 0x892 <__stop_program>
